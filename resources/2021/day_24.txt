inp w
mul x 0                         ; (let [x 0])
add x z                         ; (let [x z])
mod x 26                        ; (let [x (mod x 26)])
div z 1                         ; Z: (let [z (quot z Z)])
add x 12                        ; X: (let [x (+ x X)])
eql x w                         ; W: (let [x (if (= x W) 1 0)])
eql x 0                         ; (let [x (if	(= 0 x) 1 0))])
mul y 0                         ; (let [y 0])
add y 25                        ; (let [y (+ y 25)])
mul y x                         ; (let [y (* y x)])
add y 1                         ; (let [y (inc y)])
mul z y                         ; (let [z (* z y)])
mul y 0                         ; (let [y 0])
add y w                         ; (let [y w])
add y 4                         ; Y: (let [y (+ y Y)])
mul y x                         ; (let [y (* y x)])
add z y                         ; (let [z (+ z y)])
